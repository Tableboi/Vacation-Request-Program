def all_view(self):
        Controller.search_all(self)
        #list necessary for entries
        self.entries = []

        #first clear the frame that the entry widgets will fill
        for widget in self.F1.interior.winfo_children():
            widget.destroy()

        column_headers = {'borderwidth' : 1, 'relief' : 'flat'}
        column_font = tkinter.font.Font(family = "Helvetica", size = 11)
        
        self.antrags_label = ttk.Label(self.F1.interior, text = 'Antragsnummer', **column_headers)
        self.antrags_label.config(font = column_font)
        self.antrags_label.grid(column = 0, row = 0)
        
        self.start_label = ttk.Label(self.F1.interior, text = 'Startdatum', **column_headers)
        self.start_label.config(font = column_font)
        self.start_label.grid(column = 1, row = 0)

        self.end_label = ttk.Label(self.F1.interior, text = 'Endedatum', **column_headers)
        self.end_label.config(font = column_font)
        self.end_label.grid(column = 2, row = 0)

        self.stell_label = ttk.Label(self.F1.interior, text = 'Stellvertreter', **column_headers)
        self.stell_label.config(font = column_font)
        self.stell_label.grid(column = 3, row = 0)

        self.grund_label = ttk.Label(self.F1.interior, text = 'Grund', **column_headers)
        self.grund_label.config(font = column_font)
        self.grund_label.grid(column = 4, row = 0)

        self.status_label = ttk.Label(self.F1.interior, text = 'Status', **column_headers)
        self.status_label.config(font = column_font)
        self.status_label.grid(column = 5, row = 0)

        self.pnummer_label = ttk.Label(self.F1.interior, text = 'Personalnummer', **column_headers)
        self.pnummer_label.config(font = column_font)
        self.pnummer_label.grid(column = 6, row = 0)

        antrags_list = []
        start_list = []
        end_list = []
        stell_list = []
        grund_list = []
        status_list = []
        status_val_list = []
        emp_list = []
        button_list = []
        delete_button_list = []

        for i in range(0, len(Controller.fetched_reqs), 1):
            pad_options = {'padx' : 5, 'pady' : 5}
            self.entry = Controller.fetched_reqs[i]

            antrags_list.append(tk.Entry(self.F1.interior, width = 15, relief = 'groove'))

            start_list.append(tk.Entry(self.F1.interior, width = 15, relief = 'groove'))

            end_list.append(tk.Entry(self.F1.interior, width = 15, relief = 'groove'))
            
            stell_list.append(tk.Entry(self.F1.interior, width = 15, relief = 'groove'))

            grund_list.append(tk.Entry(self.F1.interior, width = 15, relief = 'groove'))

            emp_list.append(tk.Entry(self.F1.interior, width = 15, relief = 'groove'))

            antrags_list[i].insert(0, str(self.entry[0]))
            antrags_list[i].grid(row = i + 1, column = 0, **pad_options)
            antrags_list[i].config(state = 'disabled')

            start_list[i].insert(0, str(self.entry[1]))
            start_list[i].grid(row = i + 1, column = 1, **pad_options)

            end_list[i].insert(0, str(self.entry[2]))
            end_list[i].grid(row = i +1, column = 2, **pad_options)

            stell_list[i].insert(0, str(self.entry[3]))
            stell_list[i].config(foreground = 'black')
            if int(self.entry[7]) == 0:
                stell_list[i].config(background = '#d4ef64')
            elif int(self.entry[7]) == 1:
                stell_list[i].config(background = '#64ef7f')
            elif int(self.entry[7]) == 2:
                stell_list[i].config(background = '#ef7f64')
            stell_list[i].grid(row = i + 1, column = 3, **pad_options)

            grund_list[i].insert(0, str(self.entry[4]))
            grund_list[i].grid(row = i + 1, column = 4, **pad_options)

            emp_list[i].insert(0, str(self.entry[6]))
            emp_list[i].grid(row = i + 1, column = 6)

            def cycle_status_val(i):
                if status_val_list[i] == 2:
                    status_list[i].config(background = '#d4ef64', foreground = 'black', \
                        text = 'geplant')
                    status_val_list[i] = 1
                elif status_val_list[i] == 1:
                    status_list[i].config(background = '#ef7f64', foreground = 'white', \
                        text = 'denied')
                    status_val_list[i] = 0
                elif status_val_list[i] == 0:
                    status_list[i].config(background = '#64ef7f', foreground = 'black', \
                        text = 'best채tigt')
                    status_val_list[i] = 2

            status_list.append(tk.Button(self.F1.interior, width = 10, \
                command = lambda i=i :cycle_status_val(i)))
            status_val_list.append(int)
            if str(self.entry[5]) == 'best채tigt':
                status_list[i].config(background = '#64ef7f', foreground = 'black', \
                    text = 'best채tigt')
                status_val_list[i] = 2
            elif str(self.entry[5]) == 'geplant':
                status_list[i].config(background = '#d4ef64', foreground = 'black', \
                    text = 'geplant')
                status_val_list[i] = 1
            elif str(self.entry [5]) =='denied':
                status_list[i].config(background = '#ef7f64', foreground = 'white', \
                    text = 'denied')
                status_val_list[i] = 0
            status_list[i].grid(row = i + 1, column = 5, **pad_options)

            def update_button(i):
                start_date = start_list[i].get().strip()
                end_date = end_list[i].get().strip()
                new_reason = grund_list[i].get().strip()

                if status_val_list[i] == 2:
                    sStatus = 'best채tigt'
                elif status_val_list[i] == 1:
                    sStatus = 'geplant'
                elif status_val_list[i] == 0:
                    sStatus = 'denied'

                sStellvertreter = stell_list[i].get().strip()
                xnRequest = antrags_list[i].get().strip()

                if end_date == '':
                    end_date = start_date
                updated = (start_date, end_date, new_reason, sStatus, sStellvertreter, xnRequest)
                Controller.man_update(self, updated)

            button_list.append(ttk.Button(self.F1.interior, text = 'Update', width = 10, \
                command = lambda i=i : update_button(i)))
            button_list[i].grid(row = i + 1, column = 7, **pad_options)

            def delete_button(i):
                Controller.delete(self, int(antrags_list[i].get()))
                self.all_view()
            
            delete_button_list.append(ttk.Button(self.F1.interior, text = 'Delete', \
                width = 10, command = lambda i=i : delete_button(i)))
            delete_button_list[i].grid(row = i + 1, column = 8, **pad_options)
