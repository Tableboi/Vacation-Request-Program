#import os
#import stat
#print(os.access(r'C:\Python\Scripts\loginviewattempt.ui', os.F_OK))

#stats = os.stat('C:\Python\Scripts\loginviewattempt.ui')
#print(stats.st_mode)
#print(oct(stats.st_mode))

#os.chmod('C:\Python\Scripts\loginviewattempt.ui', stat.S_IRWXU|stat.S_IRWXG|stat.S_IRWXO)

#C:\Users\Frre1116\Documents\qtdesignerfiles\tableattempt22.06 - Kopie.ui

from msilib.schema import Control
import sys
from PyQt5 import QtCore, QtGui, QtWidgets
import pyodbc
from PyQt5.QtWidgets import QTableWidgetItem
from PyQt5.QtCore import Qt
import datetime
from datetime import date, timedelta
import calendar
import re



class Model:
    cnxn_str = ("Driver={SQL Server Native Client 11.0};"
                    "Server=SOPCP01DE;"
                    "Database=PulseCoreTest5;"
                    "UID=PCDev2;"
                    "PWD=PCCSDev2PC5_!;")  
    cnxn = pyodbc.connect(cnxn_str)
    cursor = cnxn.cursor()


    #get employee numbers
    group_from_empnum_getter = """SELECT [nProduktionsGruppe]
                            FROM [PulseCoreTest5].[dbo].[PO_employee]
                            WHERE [nEmployee] = ?""" 
                                   
    number_getter = """SELECT [nEmployee]
                            FROM [PulseCoreTest5].[dbo].[PO_employee]
                                WHERE [nProduktionsGruppe] = ?"""
                                
    no_group_getter = """ SELECT [nEmployee]
                                        FROM [PulseCoreTest5].[dbo].[PO_employee]
                                        WHERE [nProduktionsGruppe] IS NULL"""
        
                                
    request_getter = """SELECT [xnRequest] 
                                    ,[dDateStart]
                                    ,[dDateEnd]
                                    ,[nEmployee]
                                    ,[sReasons]
                                    ,[sStatus]
                                    FROM [PulseCoreTest5].[dbo].[PC_VacationsRequests]"""
                                    
    holiday_getter = """SELECT [Feiertag], [Datum] 
                                FROM [PulseCoreTest5].[dbo].[PC_Holidays]"""
       
    def get_group_from_empnum(empnum):
        Model.cursor.execute(Model.group_from_empnum_getter, empnum)
    def get_emp_list(produktionsgruppe):
        Model.cursor.execute(Model.number_getter, produktionsgruppe)
    def get_no_group_list():
        Model.cursor.execute(Model.no_group_getter)
    def get_requests():
        Model.cursor.execute(Model.request_getter)
    def get_holidays():
        Model.cursor.execute(Model.holiday_getter)
                
class Controller:
    
    #Variables
    current_date = datetime.datetime.now()    
    current_month = datetime.datetime.now().month
    current_year = datetime.datetime.now().year

    ProduktionsGruppe = {0:'Wissenträger', 1:'Produktions Gruppe 1', 2:'Produktions Gruppe 2', 
                     3:'Produktions Gruppe 3', 4:'Produktions Gruppe 4', 5:'Produktionsunterstützung',
                     6: 'Keine Gruppe'}
    years = {0:current_year, 1:current_year + 1, 2: current_year + 2, 3: current_year + 3, 
                 4:current_year + 4, 5:current_year + 5}
    list_of_holiday_dates = []
    list_of_emp_numbers = []
    headers = []
    data_values = [] 
    selected_group = []
    selected_month = [current_month]
    selected_year = [current_year]
    request_list_raw = []
    request_dictionary = {}

    
    def __init__(self, model, view):
        self.model = model
        self.view = view    
        
    def get_group_from_empnum(empnum):
        Model.get_group_from_empnum(empnum)
        pyodbc_row = Model.cursor.fetchall()
        print(pyodbc_row)
        Controller.selected_group.append(int(str(pyodbc_row)[2]))

    def date_range(start, end):
            delta = end - start
            days = [start + timedelta(days = i) for i in range(delta.days + 1)]
            return days
        
    def get_holidays():
        Model.get_holidays()
        holidays = Model.cursor.fetchall()
        for holiday in holidays:
            holiday_date = holiday[1]
            Controller.list_of_holiday_dates.append(holiday_date.strftime('%Y.' + '%m.' + '%d'))

    def create_table():
        Controller.get_emp_list()
        Controller.get_requests()
        Controller.get_dates_for_headers()
        Controller.input_default_data()
        Controller.edit_data()

    def get_emp_list():    
        if Controller.selected_group[0] == 6:
            Model.get_no_group_list()
        else:
            Model.get_emp_list(Controller.selected_group[0])
        Controller.list_of_emp_numbers = Model.cursor.fetchall()
        Controller.list_of_emp_numbers.sort()
        for i in range(0, len(Controller.list_of_emp_numbers)):
            item = str(Controller.list_of_emp_numbers[i])
            item = re.sub(r'[(,)]', '', item)
            newitem = item.replace('"', "")
            Controller.list_of_emp_numbers.remove(Controller.list_of_emp_numbers[i])
            Controller.list_of_emp_numbers.insert(i, int(newitem[0:-1]))
        
    def get_requests():
        Model.get_requests()
        Controller.request_list_raw = Model.cursor.fetchall()
        for item in Controller.request_list_raw:
            selected_employee_number = item[3]
            if selected_employee_number in Controller.list_of_emp_numbers:
                        Controller.request_dictionary[item[0]] = [selected_employee_number, item[1].strftime('%Y.' + '%m.' + '%d')]
                        start_date = item[1]
                        end_date = item[2]
                        daterangelist = Controller.date_range(start_date, end_date)
                
                        for i in range(0, len(daterangelist)):
                            Controller.request_dictionary[item[0] + (i * .01)] = [selected_employee_number, 
                                                daterangelist[i].strftime('%Y.' + '%m.' + '%d'), item[5]]
            else:
                    pass
        
    def get_dates_for_headers():    
        Controller.headers.clear()
        number_of_days = calendar.monthrange(Controller.selected_year[0], Controller.selected_month[0])[1]
        first_date = datetime.date(Controller.selected_year[0], Controller.selected_month[0], 1)
        last_date = datetime.date(Controller.selected_year[0], Controller.selected_month[0], number_of_days)
        
        delta = last_date - first_date
        for i in range(delta.days + 1):
            day = ((first_date + datetime.timedelta(days = i)))
            Controller.headers.append(day.strftime('%a %d-%m-%Y'))
            
    def input_default_data():
        Controller.get_holidays()
        Controller.data_values.clear()    
        for ii in range(0, len(Controller.list_of_emp_numbers)):
            data_list = []
            for i in range(0, len(Controller.headers)):
                weekend = set([5, 6])
                if datetime.datetime(int(Controller.selected_year[0]), 
                                     int(Controller.selected_month[0]), i + 1).weekday() in weekend:
                    data_list.append('weekend')
                else:
                    data_list.append('p')
            
            for item in Controller.list_of_holiday_dates:
                dayentered = (item[8:10:1]).lstrip('0')
                monthentered = (item[5:7:1]).lstrip('0')
                yearentered = item[0:4:1]
                if int(monthentered) == Controller.selected_month[0]:
                    if int(yearentered) == Controller.selected_year[0]:
                        data_list[int(dayentered) - 1] = 'holiday'
            data_tuple = tuple(data_list)
            Controller.data_values.append(data_tuple)
       
    def edit_data():
        for key, value in Controller.request_dictionary.items():
            req_list = value
            number_entered = req_list[0]
            dateentered = req_list[1]
            status = req_list[2]
            
            dayentered = (dateentered[8:10:1]).lstrip('0')
            monthentered = (dateentered[5:7:1]).lstrip('0')
            yearentered = dateentered[0:4:1]
            
            for item in Controller.list_of_emp_numbers:
                if number_entered == item:
                    nameindex = Controller.list_of_emp_numbers.index(number_entered)    
                else:
                    nameindex = None
                if int(monthentered) == Controller.selected_month[0] and int(
                    yearentered) == Controller.selected_year[0] and nameindex != None:
                    data_list = list(Controller.data_values[nameindex])
                    if data_list[int(dayentered) - 1] == 'p':
                        data_list[int(dayentered) - 1] = status
                        data_tuple = tuple(data_list)
                        Controller.data_values[nameindex] = data_tuple
                    else:
                        pass
                else:
                    pass

class TableModel(QtCore.QAbstractTableModel):
    def __init__(self, data):
        super(TableModel, self).__init__()
        self._data = data
        Controller.create_table()
    
    def data(self, index, role):
        #index gives location in the table for which info is currently being requested. .row() and .column()
        #role describes what kind of info the method should return on thi call. QtDisplayRole expects a str.
        if role == Qt.DisplayRole:
            #.row() indexes into the outer list
            #.column() indexes into the sub-list
            value = self._data[index.row()][index.column()]

            #if isinstance(value, datetime.datetime):
                #return value.strftime('%d-%m-%Y')
            
            return value #default anything else
        
         
    def rowCount(self, index):
        return len(Controller.list_of_emp_numbers)
        
    
    def columnCount(self, index):
        return len(Controller.headers)
    
    def headerData(self, section, orientation, role = QtCore.Qt.DisplayRole):
        if orientation == QtCore.Qt.Horizontal and role == QtCore.Qt.DisplayRole:
            return Controller.headers[section]
        if orientation == QtCore.Qt.Vertical and role == QtCore.Qt.DisplayRole:
            return 'Employee {}'.format(Controller.list_of_emp_numbers[section])
        return QtCore.QAbstractTableModel.headerData(self, section, orientation, role)
 
